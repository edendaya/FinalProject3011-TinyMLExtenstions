<assembly>
<stepsUntilMsg>20000</stepsUntilMsg>
<memory>MS</memory>
<var>
<name>SP</name>
<length>5</length>
<default>0</default>
</var>
<var>
<name>empty</name>
<length>1</length>
<default>1</default>
</var>
<command>
<type>I</type>
<opcode>100011</opcode>
<name>lw</name>
<function>000000</function>
<action>MR[RD]:=M[imm+MR[RS1]]</action>
<args>RD,RS1,imm</args>
<isbranch>false</isbranch>
</command>
<command>
<type>I</type>
<opcode>101011</opcode>
<name>sw</name>
<function>000000</function>
<action>M[imm+MR[RS1]]:=MR[RD]</action>
<args>RD,RS1,imm</args>
<isbranch>false</isbranch>
</command>
<command>
<type>I</type>
<opcode>001011</opcode>
<name>addi</name>
<function>000000</function>
<action>MR[RD]:=MR[RS1]+imm</action>
<args>RD,RS1,imm</args>
<isbranch>false</isbranch>
</command>
<command>
<type>I</type>
<opcode>011001</opcode>
<name>sgti</name>
<function>000000</function>
<action>MR[RD]:=(MR[RS1] &gt; imm)</action>
<args>RD,RS1,imm</args>
<isbranch>false</isbranch>
</command>
<command>
<type>I</type>
<opcode>011010</opcode>
<name>seqi</name>
<function>000000</function>
<action>MR[RD]:=(MR[RS1]==imm)</action>
<args>RD,RS1,imm</args>
<isbranch>false</isbranch>
</command>
<command>
<type>I</type>
<opcode>011011</opcode>
<name>sgei</name>
<function>000000</function>
<action>MR[RD]:=(MR[RS1] &gt;= imm)</action>
<args>RD,RS1,imm</args>
<isbranch>false</isbranch>
</command>
<command>
<type>I</type>
<opcode>011100</opcode>
<name>slti</name>
<function>000000</function>
<action>MR[RD]:=(MR[RS1] &lt; imm)</action>
<args>RD,RS1,imm</args>
<isbranch>false</isbranch>
</command>
<command>
<type>I</type>
<opcode>011101</opcode>
<name>snei</name>
<function>000000</function>
<action>MR[RD]:=(MR[RS1]!=imm)</action>
<args>RD,RS1,imm</args>
<isbranch>false</isbranch>
</command>
<command>
<type>I</type>
<opcode>011110</opcode>
<name>slei</name>
<function>000000</function>
<action>MR[RD]:=(MR[RS1] &lt;= imm)</action>
<args>RD,RS1,imm</args>
<isbranch>false</isbranch>
</command>
<command>
<type>I</type>
<opcode>000100</opcode>
<name>beqz</name>
<function>000000</function>
<action>PC:=PC+(MR[RS1]==0?imm:0)</action>
<args>RS1,imm</args>
<isbranch>true</isbranch>
</command>
<command>
<type>I</type>
<opcode>000101</opcode>
<name>bnez</name>
<function>000000</function>
<action>PC:=PC+(MR[RS1]?imm:0)</action>
<args>RS1,imm</args>
<isbranch>true</isbranch>
</command>
<command>
<type>I</type>
<opcode>010110</opcode>
<name>jr</name>
<function>000000</function>
<action>PC:=MR[RS1]-1</action>
<args>RS1</args>
<isbranch>false</isbranch>
</command>
<command>
<type>I</type>
<opcode>010111</opcode>
<name>jalr</name>
<function>000000</function>
<action>MR[31]:=PC+1; PC:=MR[RS1]-1</action>
<args>RS1</args>
<isbranch>false</isbranch>
</command>
<command>
<type>I</type>
<opcode>110000</opcode>
<name>special-nop</name>
<function>000000</function>
<action>nop</action>
<args>none</args>
<isbranch>false</isbranch>
</command>
<command>
<type>I</type>
<opcode>111111</opcode>
<name>halt</name>
<function>000000</function>
<action>halt</action>
<args>none</args>
<isbranch>false</isbranch>
</command>
<command>
<type>R</type>
<opcode>000000</opcode>
<name>slli</name>
<function>000000</function>
<action>MR[RD]:=MR[RS1] &lt;&lt; 1</action>
<args>RD, RS1</args>
<isbranch>false</isbranch>
</command>
<command>
<type>R</type>
<opcode>000000</opcode>
<name>srli</name>
<function>000010</function>
<action>MR[RD]:=((MR[RS1] &gt;&gt; 1) &amp; 2147483647)</action>
<args>RD,RS1</args>
<isbranch>false</isbranch>
</command>
<command>
<type>R</type>
<opcode>000000</opcode>
<name>add</name>
<function>100011</function>
<action>MR[RD]:=MR[RS1]+MR[RS2]</action>
<args>RD,RS1,RS2</args>
<isbranch>false</isbranch>
</command>
<command>
<type>R</type>
<opcode>000000</opcode>
<name>sub</name>
<function>100010</function>
<action>MR[RD]:=MR[RS1]-MR[RS2]</action>
<args>RD,RS1,RS2</args>
<isbranch>false</isbranch>
</command>
<command>
<type>R</type>
<opcode>000000</opcode>
<name>and</name>
<function>100110</function>
<action>MR[RD]:=MR[RS1] &amp; MR[RS2]</action>
<args>RD,RS1,RS2</args>
<isbranch>false</isbranch>
</command>
<command>
<type>R</type>
<opcode>000000</opcode>
<name>or</name>
<function>100101</function>
<action>MR[RD]:=MR[RS1] | MR[RS2]</action>
<args>RD,RS1,RS2</args>
<isbranch>false</isbranch>
</command>
<command>
<type>R</type>
<opcode>000000</opcode>
<name>xor</name>
<function>100100</function>
<action>MR[RD]:=MR[RS1] ^ MR[RS2]</action>
<args>RD,RS1,RS2</args>
<isbranch>false</isbranch>
</command>
<comment> These are the added stack commands</comment>
<command>
<type>R</type>
<opcode>000000</opcode>
<name>popr</name>
<function>111000</function>
<action>MR[RD]:=(empty==1?61166:MS[SP]); empty:=(SP==0?1:0); SP:=(SP==0?0:SP-1)</action>
<args>RD</args>
<isbranch>false</isbranch>
</command>
<command>
<type>R</type>
<opcode>000000</opcode>
<name>popp</name>
<function>111101</function>
<action>PC:=(empty==1?PC:MS[SP]); empty:=(SP==0?1:0); SP:=(SP==0?0:SP-1)</action>
<args>none</args>
<isbranch>false</isbranch>
</command>
<command>
<type>R</type>
<opcode>000000</opcode>
<name>pushr</name>
<function>111001</function>
<action>MS[(empty==1?0:(SP==31?31:SP+1))]:=(SP==31?MS[SP]:MR[RS1]); SP:=(empty==1?0:(SP==31?31:SP+1)); empty:=0</action>
<args>RS1</args>
<isbranch>false</isbranch>
</command>
<command>
<type>R</type>
<opcode>000000</opcode>
<name>pushp</name>
<function>111010</function>
<action>MS[(empty==1?0:(SP==31?31:SP+1))]:=(SP==31?MS[SP]:PC); SP:=(empty==1?0:(SP==31?31:SP+1)); empty:=0</action>
<args>none</args>
<isbranch>false</isbranch>
</command>
<command>
<type>R</type>
<opcode>000000</opcode>
<name>clrs</name>
<function>111011</function>
<action>SP:=0;empty:=1</action>
<args>none</args>
<isbranch>false</isbranch>
</command>
<command>
<type>R</type>
<opcode>000000</opcode>
<name>topr</name>
<function>111100</function>
<action>MR[RD]:=(empty==1?61166:MS[SP])</action>
<args>RD</args>
<isbranch>false</isbranch>
</command>
<command>
<type>I</type>
<opcode>111001</opcode>
<name>pushi</name>
<function>000000</function>
<action>MS[(empty==1?0:(SP==31?31:SP+1))]:=(SP==31?MS[SP]:imm); SP:=(empty==1?0:(SP==31?31:SP+1)); empty:=0</action>
<args>imm</args>
<isbranch>false</isbranch>
</command>
<command>
<type>R</type>
<opcode>000000</opcode>
<name>relu</name>
<function>100111</function>
<action>MR[RD]:=MAX( MR[RS1] MR[RS2] )</action>
<args>RD,RS1,RS2</args>
<isbranch>false</isbranch>
</command>
<command>
<type>R</type>
<opcode>000000</opcode>
<name>mul</name>
<function>001001</function>
<action>MR[RD]:=MR[RS1]*MR[RS2]</action>
<args>RD,RS1,RS2</args>
<isbranch>false</isbranch>
</command>
<command>
<type>R</type>
<opcode>000000</opcode>
<name>mac</name>
<function>001100</function>
<action>MR[RD]:=MR[RD]+MR[RS1]*MR[RS2]</action>
<args>RD,RS1,RS2</args>
<isbranch>false</isbranch>
</command>
<command>
<type>R</type>
<opcode>000000</opcode>
<name>macrst</name>
<function>001110</function>
<action>MR[RD]:=0;MR[RD]:=MR[RS1]*MR[RS2]</action>
<args>RD,RS1,RS2</args>
<isbranch>false</isbranch>
</command>
</assembly>